datasource db {  provider = "sqlite"  url      = env("DATABASE_URL")}
generator client {  provider = "prisma-client-js"}
enum OrderStatus {  PENDING  CONFIRMED  DELIVERED  CANCELED}
model Account {  id                String  @id @default(cuid())  userId            String  providerType      String  providerId        String  providerAccountId String  refreshToken      String?  accessToken       String?  accessTokenExpires DateTime?  createdAt         DateTime @default(now())  updatedAt         DateTime @updatedAt  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([providerId, providerAccountId])}
model Session {  id           String   @id @default(cuid())  sessionToken String   @unique  userId       String  expires      DateTime  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)}
model User {  id            String    @id @default(cuid())  name          String?  email         String?   @unique  emailVerified DateTime?  image         String?  hashedPassword String?  createdAt     DateTime  @default(now())  updatedAt     DateTime  @updatedAt  accounts      Account[]  sessions      Session[]  products      Product[]  orders        Order[]}
model VerificationToken {  identifier String  token      String   @unique  expires    DateTime
  @@unique([identifier, token])}
model Product {  id          String      @id @default(cuid())  userId      String  name        String  description String?  price       Float  stock       Int  imageUrl    String?  createdAt   DateTime    @default(now())  updatedAt   DateTime    @updatedAt  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)  orderItems  OrderItem[]}
model Order {  id              String      @id @default(cuid())  userId          String  customerName    String  customerPhone   String  customerAddress String?  totalAmount     Float  status          OrderStatus @default(PENDING)  createdAt       DateTime    @default(now())  updatedAt       DateTime    @updatedAt  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)  orderItems      OrderItem[]}
model OrderItem {  id        String   @id @default(cuid())  orderId   String  productId String  quantity  Int  price     Float  createdAt DateTime @default(now())  updatedAt DateTime @updatedAt  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  @@unique([orderId, productId])}